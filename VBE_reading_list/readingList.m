%% EXTRACT READING LIST FOR FLUENCY ASSESSMENT
% Before the pilot experiment (and also other sessions?) participants will
% be asked to read a list of words, noting total time and accuracy. This
% measure is useful for assessing expertise and fluency in visual Braille.
%
% Parameters for words to be included:
% - between 4 and 8 letters long
% - with a frequency of at least 1 / mil (ceiling around 10-15 / mil)
% - consistency ranging from LOW to HIGH (TBD)
% - all types of words
% - total reading time to be max 5 min = 300 sec = 60 words * 5 sec for each word
%
% Iterated 3 times, to obtain different measures. 
% Check 'choosing_process.mat' for the iterations and partial files.
% The third and final one is also stored in 'reading_list.xlsx'


%% Import lexique and lexique infra 
%  Later, add code to download it directly
clear;

addpath('Lexique383');
addpath('LexiqueInfra111');
importLex; % script generated by MATLAB. Selection of relevant fields is in the import_lex.m script
importInfra; % same goes of Infra

%% Progressively skim all the un-necessary entries

load('imported.mat');

% between 4 and 8 letters long
lexLength = lex(lex.nblettres >= 4 & lex.nblettres <= 8,:); 

% Frequency higher than 1 / mil (in both indexes) and lower than 20
lexFreq = lexLength(lexLength.freqfilms2 > 1 & lexLength.freqlivres > 1  & ...
                    lexLength.freqfilms2 <= 20 & lexLength.freqlivres <= 20,:);
  
% Remove the onomatopoeias ones (ONO)
lexCat = lexFreq(lexFreq.cgram ~= 'ONO',:);

% Pick only lemmes: no plurals, no conjucations of verbs, etc.
% Deflem means how many people reported to know the lemma of the word
lexLem = lexCat(lexCat.islem == 1 & lexCat.deflem == 100,:);
        
% Merge with LexiqueInfra: only Gr-Ph parameters
infraGrPh = infra;

% Delete duplicate rows from the tables (at the moment not necessary)
infraGrPh = deleteRows(infraGrPh);
lexLem = deleteRows(lexLem);

% Same var name needed to use join function
lexLem.Properties.VariableNames{1} = 'Item';
lexLem(1524,:) = []; %  error in dataset
% matches function finds matches for a string. If the word is present in
% both lists, keep it.
infra_sel = infraGrPh(matches(infraGrPh.Item,lexLem{:,1}),:);

% matches type of word. Some are intended as verb and adjective, noun, etc.
% If they are words repeated, mark them
type_str = string(infra_sel.cgram);
infra_sel.cgram_str = type_str;
infra_sel = movevars(infra_sel, 'cgram_str', 'Before', 'cgram');
infra_merge = mergevars(infra_sel,[1 3],'NewVariableName','word');

% At the moment, not merged with consistency info
rL_temp = lexLem;

%% Divide by letters number

% 30 words / 5 numbers (4-5-6-7-8 letters) = 6 words per number

% split lexique entries into 5 arrays, each corresponding to a number 
for i = 4:8
    eval(['rL_' num2str(i) 'L = rL_temp(rL_temp.nblettres == ' num2str(i) ' ,:);']);
end
 
%% Randomly pick 6 from each group

% Initialize final set
list = table;
setUpRand(); % from CCP_PTB source code

% Get 6 random words from each length
for j = 4:8
    rep = 1; % assume the random array contains repetitions.
             % Will loop while there are repetitions
    while rep == 1
        % get maximum random value from length of table and pick 20 
        eval(['max_rand = size(rL_' num2str(j) 'L,1);']);   
        rand_positions = randi(max_rand,[1 20]);
        
        if length(unique(rand_positions)) == 20 % all elements are unique, no repetitions
            rep = 0; % stops the loop, the choice is ok
        end
    end
    % form those valuse, pick the corrseponding lines, then add a columns
    % 'chosen' with 0 for each parameter
    eval(['words_' num2str(j) 'L = rL_' num2str(j) 'L(rand_positions,:);']);
    eval(['words_' num2str(j) 'L.chosen(1,1) = 1;']);
    
    % also add those words to the total list (to check for similarities and
    % repetitions
    eval(['list = vertcat(list, words_' num2str(j) 'L);']);
end

% Save first selection: random 20 elements for each letter length
list_1st_selection = list(:,1:13);

list.chosen(1,1) = 0;
%% Manually selected based on most common words
% GO CHECK THE LIST, THIS IS DONE FOR reading_list 1st only 

% List 1
% list.chosen([2,3,6,7,8,10,13,14,15,16,17,18,19,21,22,24,25,26,27,28,29,31,...
%              33,34,37,38,42,43,45,47,48,50,51,52,55,56,58,59,60,61,63,64,...
%              65,66,70,72,73,74,77,78,81,83,84,85,87,90,91,92,93,94,96,97,98,100]) = 1;   

% List 2
% list.chosen([2,3,4,5,6,7,8,9,11,13,15,17,20,21,22,23,24,26,27,28,29,31,33,34,36,38,40,...
%              41,42,43,44,53,57,58,59,61,62,64,65,67,70,71,72,73,74,76,77,78,79,81,...
%              82,83,84,85,86,87,88,90,91,92,93,95,96,97,98]) = 1; 

% List 3
% list.chosen([2,4,5,6,7,8,11,12,14,16,17,19,20,23,24,27,28,29,30,31,33,34,...
%              35,40,42,43,45,46,47,49,51,54,55,56,57,60,61,63,64,65,66,67,...
%              69,70,72,73,75,76,77,78,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99]) = 1; 
         
%% Assign the same chosen values to the letters subsets
w4L_chosen = words_4L(words_4L.chosen == list.chosen([1:20]),:);
w5L_chosen = words_5L(words_5L.chosen == list.chosen([21:40]),:);
w6L_chosen = words_6L(words_6L.chosen == list.chosen([41:60]),:);
w7L_chosen = words_7L(words_7L.chosen == list.chosen([61:80]),:);
w8L_chosen = words_8L(words_8L.chosen == list.chosen([81:100]),:); 

% Save second selection: manual selection of common words 
list_2nd_selection = list(list.chosen == 1,:);

% Pick 6 random words from each group of letters
% !! maximums and assignations are made on ous specific selection !!
% Resets list
list = table;
for k = 1:5
    rep = 1; % assume the random array contains repetitions.
             % Will loop while there are repetitions
    while rep == 1
    % Generate the random positions based on the total of words selected
        eval(['this_rand = randi(size(w' num2str(k+3) 'L_chosen,1),[1 6]);']);
        if length(unique(this_rand)) == 6 % all elements are unique, no repetitions
            rep = 0; % stops the loop, the choice is ok
        end
    end
    
    % Pick the entries corresponding to the position extracted
    eval(['w' num2str(k+3) 'L_selection = w' num2str(k+3) 'L_chosen(this_rand,:);']);
    eval(['list = vertcat(list, w' num2str(k+3) 'L_selection);']); % compose the final list
end

% Save third selection: random selection of 6 words for each letter length
list_3rd_selection = list;

%% Randomize order of words
% Permutation: balanced. 15 words in left columns are 3 words for each letter group
ordered = rl_order;
or_left = ordered([1 2 7 8 13 14 19 20 25 26 ],:);
or_cen = ordered([3 4 9 10 15 16 21 22 27 28],:);
or_right = ordered([5 6 11 12 17 18 23 24 29 30],:);

shuff_left = or_left(randperm(size(or_left,1)),:);
shuff_cen =  or_cen(randperm(size(or_cen,1)),:);
shuff_right = or_right(randperm(size(or_right,1)),:);

% Finally, appropriate name
reading_list = vertcat(shuff_left, shuff_cen, shuff_right);

%% Write it in a table
writetable(reading_list,'reading_list3.xlsx');

%% Save

clearvars i infra_sel infra_merge infraGrPh j k lexCat lexFreq lexLem lexLength list max_rand rand_positions ...
          rep rL_4L rL_5L rL_6L rL_7L rL_8L this_rand type_str ordered shuffled or_left or_right shuff_left shuff_right
save('reading_list_3.mat');


%% Show words with larger space between to screenshot for pilot 

% Open Screen to calculate boxes
Screen('Preference', 'SkipSyncTests', 1);
bg_color = [0 0 0];

try
    % Routine stuff
    % PTB opens a windows on the screen with the max index
    screens = Screen('Screens');
    whichscreen = max(screens);
    [win, rect] = Screen('OpenWindow', whichscreen, bg_color); 
 
    font = 'Segoe UI Symbol'; 
    size = 50;
    Screen('TextFont', win, font);
    Screen('TextSize', win, size); 
    win_x = rect(3);  win_y = rect(4);
    
    box_x = scramble.box.references{8,3}{1,1}(1);
    box_y = scramble.box.references{8,3}{1,1}(2);
    
    coordsArray = zeros(30,2);
    coordsArray(1:10,1) = win_x/2 - 680;
    coordsArray(11:20,1)= win_x/2 - 150;
    coordsArray(21:30,1)= win_x/2 + 380;
    
    coordsArray([1 11 21],2) = win_y/2 - 360;
    coordsArray([2 12 22],2) = win_y/2 - 280;
    coordsArray([3 13 23],2) = win_y/2 - 200;
    coordsArray([4 14 24],2) = win_y/2 - 120;
    coordsArray([5 15 25],2) = win_y/2 - 40;
    coordsArray([6 16 26],2) = win_y/2 + 40;
    coordsArray([7 17 27],2) = win_y/2 + 120;
    coordsArray([8 18 28],2) = win_y/2 + 200;
    coordsArray([9 19 29],2) = win_y/2 + 280;
    coordsArray([10 20 30],2)= win_y/2 + 360;
    
    % Show words 
    for i = 1:30
        %Screen('DrawText', win, double(char(braille(i))), coordsArray(i,1), coordsArray(i,2), [255 255 255]);
        DrawFormattedText(win, double(char(braille(i))), coordsArray(i,1), coordsArray(i,2), [255 255 255]);
    end
    Screen('Flip', win);  
    WaitSecs(10); 
        
    Screen('CloseAll');
    ShowCursor
catch
    Priority(0);
    if exist('origLUT', 'var')
        Screen('LoadNormalizedGammaTable', screenNumber, origLUT);
    end
    Screen('CloseAll');
    psychrethrow(psychlasterror); 
end
